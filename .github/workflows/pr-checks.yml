name: PR Checks

permissions: read-all

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  # Main CI job that runs all required checks
  pr-checks:
    name: '🚀 PR Validation'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.19'

      - name: 🌐 Setup Chrome for tests
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            packages/*/node_modules
          key: bun-deps-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-deps-${{ runner.os }}-

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🎨 Check code formatting
        id: format-check
        run: |
          echo "### 🎨 Format Check" >> $GITHUB_STEP_SUMMARY
          if bun run check-format; then
            echo "✅ Code formatting is correct" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code formatting issues found. Run 'bun run format' to fix." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 🧪 Run all tests
        id: test-all
        run: |
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          bun test:all 2>&1 | tee test-output.txt
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          tail -5 test-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit $TEST_EXIT_CODE
        env:
          CI: true
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable

      - name: 📊 Run tests with coverage
        id: test-coverage
        run: |
          echo "### 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          bun test --coverage 2>&1 | tee coverage-output.txt
          COVERAGE_EXIT_CODE=${PIPESTATUS[0]}
          # Extract coverage summary (last 10 lines usually contain the summary)
          tail -10 coverage-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          exit $COVERAGE_EXIT_CODE
        env:
          CI: true
          PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable

      - name: 📤 Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-output.txt
            coverage-output.txt
            coverage/
          retention-days: 7

      - name: 💬 Comment PR (success)
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ✅ All PR checks passed!

            - 🎨 **Format Check**: Passed
            - 🧪 **All Tests**: Passed
            - 📊 **Coverage Tests**: Passed

            Great work! Your PR is ready for review.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: 💬 Comment PR (failure)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const formatStatus = '${{ steps.format-check.outcome }}' === 'success' ? '✅ Passed' : '❌ Failed';
            const testStatus = '${{ steps.test-all.outcome }}' === 'success' ? '✅ Passed' : '❌ Failed';
            const coverageStatus = '${{ steps.test-coverage.outcome }}' === 'success' ? '✅ Passed' : '❌ Failed';

            const comment = `## ❌ PR checks failed

            | Check | Status | Action Required |
            |-------|--------|-----------------|
            | 🎨 Format Check | ${formatStatus} | ${formatStatus.includes('Failed') ? 'Run `bun run format`' : 'None'} |
            | 🧪 All Tests | ${testStatus} | ${testStatus.includes('Failed') ? 'Fix failing tests' : 'None'} |
            | 📊 Coverage Tests | ${coverageStatus} | ${coverageStatus.includes('Failed') ? 'Check coverage report' : 'None'} |

            Please fix the issues and push the changes.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });