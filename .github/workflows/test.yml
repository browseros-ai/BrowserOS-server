name: Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - dev/folder_structure # Temporary for testing

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: macos-latest
    timeout-minutes: 10

    permissions:
      contents: read
      pull-requests: write # Allow commenting on PRs

    steps:
      - name: ðŸ“¥ Checkout code
        uses: actions/checkout@v4

      - name: ðŸ§° Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.2.19'

      - name: ðŸ“¦ Install dependencies
        run: bun install --frozen-lockfile

      - name: ðŸ§ª Run tests with coverage
        run: |
          # Run tests with coverage reporting
          bun test --coverage --coverage-reporter=text --coverage-reporter=lcov | tee coverage-output.txt

          # Capture exit code
          TEST_EXIT_CODE=${PIPESTATUS[0]}

          # Extract coverage summary for PR comment
          echo "COVERAGE_SUMMARY<<EOF" >> $GITHUB_ENV
          tail -n 30 coverage-output.txt | grep -A 20 "Coverage summary" || tail -n 15 coverage-output.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Exit with test exit code
          exit $TEST_EXIT_CODE
        env:
          PUPPETEER_EXECUTABLE_PATH: /Applications/Google Chrome.app/Contents/MacOS/Google Chrome

      - name: ðŸ“Š Generate coverage report
        if: always()
        run: |
          echo "### ðŸ“Š Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage-output.txt ]; then
            tail -n 30 coverage-output.txt | grep -A 20 "Coverage" || cat coverage-output.txt | tail -n 20
          else
            echo "No coverage data available"
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: ðŸ’¬ Comment PR with coverage
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read coverage output
            let coverage = 'Coverage data not available';
            if (fs.existsSync('coverage-output.txt')) {
              const content = fs.readFileSync('coverage-output.txt', 'utf8');
              const lines = content.split('\n');

              // Find coverage summary section
              let summaryStart = -1;
              for (let i = lines.length - 1; i >= Math.max(0, lines.length - 50); i--) {
                if (lines[i].includes('File') || lines[i].includes('Coverage') || lines[i].includes('All files')) {
                  summaryStart = i;
                  break;
                }
              }

              if (summaryStart >= 0) {
                coverage = lines.slice(summaryStart, Math.min(summaryStart + 20, lines.length)).join('\n');
              } else {
                // Fallback: just take last 15 lines
                coverage = lines.slice(-15).join('\n');
              }
            }

            const comment = `## ðŸ“Š Test Coverage Report

            \`\`\`
            ${coverage}
            \`\`\`

            Generated by [Bun test coverage](https://bun.sh/docs/test/coverage) ðŸš€`;

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Test Coverage Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: ðŸ“¤ Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage-output.txt
            coverage/
            lcov.info
          retention-days: 7
