name: BrowserOS CI - Bun

permissions: read-all

on:
  push:
    branches:
      - main
      - 'dev/**'
  pull_request:
    types: [opened, synchronize, reopened]

env:
  BUN_VERSION: '1.2.19'
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'false'
  PUPPETEER_EXECUTABLE_PATH: '/usr/bin/google-chrome-stable'

jobs:
  # Job 1: Check code formatting
  check-format:
    name: '🎨 Check Code Format'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better git operations

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: ✅ Check formatting
        run: bun run check-format

      - name: 📝 Check TypeScript
        run: bun run typecheck

  # Job 2: Run all tests
  test-all:
    name: '🧪 Run All Tests'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      # Linux-specific Chrome setup
      - name: 🌐 Setup Chrome (Linux)
        if: runner.os == 'Linux'
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      # macOS-specific Chrome setup
      - name: 🌐 Setup Chrome (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install --cask google-chrome
          echo "PUPPETEER_EXECUTABLE_PATH=/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" >> $GITHUB_ENV

      # Windows-specific Chrome setup
      - name: 🌐 Setup Chrome (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install googlechrome -y
          echo "PUPPETEER_EXECUTABLE_PATH=C:\Program Files\Google\Chrome\Application\chrome.exe" >> $env:GITHUB_ENV

      - name: 💾 Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🧪 Run all tests
        run: bun test:all
        env:
          CI: true

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: |
            test-results/
            coverage/
          retention-days: 7

  # Job 3: Test with coverage
  test-coverage:
    name: '📊 Test Coverage'
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 🌐 Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: 💾 Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-coverage-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-coverage-
            ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🧪 Run tests with coverage
        run: bun test --coverage
        env:
          CI: true

      - name: 📈 Generate coverage report
        if: always()
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          bun test --coverage 2>&1 | tail -20 >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      # Optional: Upload to Codecov (uncomment if you use Codecov)
      # - name: 📊 Upload to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ./coverage/lcov.info
      #     fail_ci_if_error: false
      #     verbose: true

  # Job 4: Build binaries (ensure they compile)
  build-binaries:
    name: '🔨 Build Binaries'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            command: build:binary:linux
          - os: macos-latest
            target: macos
            command: build:binary:macos
          - os: windows-latest
            target: windows
            command: build:binary:windows

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 💾 Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-build-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-build-
            ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔨 Build binary
        run: bun run ${{ matrix.command }}

      - name: 📤 Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: browseros-server-${{ matrix.target }}
          path: dist/browseros-server*
          retention-days: 7

  # Job 5: Security scanning (optional but recommended)
  security-scan:
    name: '🔒 Security Scan'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 Run audit
        continue-on-error: true
        run: |
          # Bun doesn't have built-in audit yet, but we can check for updates
          bun update --dry-run || true

          # Check for known vulnerabilities in dependencies
          # You can add other security tools here

  # Job 6: Monorepo package tests (test each package individually)
  test-packages:
    name: '📦 Test Package: ${{ matrix.package }}'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        package: [core, tools, mcp-server, server]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 🌐 Setup Chrome
        if: matrix.package == 'tools' || matrix.package == 'core'
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: 💾 Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-pkg-${{ matrix.package }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-pkg-${{ matrix.package }}-
            ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🧪 Test ${{ matrix.package }} package
        run: bun test:${{ matrix.package }}
        env:
          CI: true

  # Final status check for branch protection
  ci-success:
    name: '✅ CI Success'
    runs-on: ubuntu-latest
    needs:
      - check-format
      - test-all
      - test-coverage
      - build-binaries
      - test-packages
    if: always()

    steps:
      - name: 🎯 Check CI Status
        run: |
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "❌ CI Failed - One or more jobs failed"
            exit 1
          elif [ "${{ contains(needs.*.result, 'cancelled') }}" = "true" ]; then
            echo "⚠️ CI Cancelled - One or more jobs were cancelled"
            exit 1
          else
            echo "✅ CI Passed - All jobs completed successfully"
            exit 0
          fi

      - name: 📝 Summary
        if: always()
        run: |
          echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Format Check | ${{ needs.check-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| All Tests | ${{ needs.test-all.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.test-coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build-binaries.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Package Tests | ${{ needs.test-packages.result }} |" >> $GITHUB_STEP_SUMMARY